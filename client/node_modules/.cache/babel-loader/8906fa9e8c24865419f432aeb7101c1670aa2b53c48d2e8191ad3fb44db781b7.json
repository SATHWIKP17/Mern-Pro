{"ast":null,"code":"import { getRandom } from \"@tsparticles/engine\";\nconst double = 2,\n  doublePI = Math.PI * double,\n  defaultRotation = 0,\n  maxAttempts = 100;\nexport function generateRandomPolygon(position, sides, radius) {\n  let rotationAngle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultRotation;\n  const polygon = [],\n    angle = doublePI / sides;\n  for (let i = 0; i < sides; i++) {\n    const currentAngle = angle * i + rotationAngle;\n    polygon.push({\n      x: position.x + radius * Math.cos(currentAngle),\n      y: position.y + radius * Math.sin(currentAngle)\n    });\n  }\n  return polygon;\n}\nexport function generateRandomPointWithinPolygon(polygon) {\n  const firstIndex = 0,\n    firstPoint = polygon[firstIndex],\n    min = {\n      ...firstPoint\n    },\n    max = {\n      ...firstPoint\n    };\n  for (const point of polygon) {\n    if (point.x < min.x) {\n      min.x = point.x;\n    }\n    if (point.x > max.x) {\n      max.x = point.x;\n    }\n    if (point.y < min.y) {\n      min.y = point.y;\n    }\n    if (point.y > max.y) {\n      max.y = point.y;\n    }\n  }\n  let randomPoint = null;\n  for (let attempts = 0; attempts < maxAttempts; attempts++) {\n    const tmpPoint = {\n      x: min.x + getRandom() * (max.x - min.x),\n      y: min.y + getRandom() * (max.y - min.y)\n    };\n    if (isPointInPolygon(tmpPoint, polygon)) {\n      randomPoint = tmpPoint;\n      break;\n    }\n  }\n  return randomPoint;\n}\nexport function generateRandomPointOnPolygonPerimeter(polygon) {\n  const sideIndex = Math.floor(getRandom() * polygon.length),\n    startPoint = polygon[sideIndex],\n    offset = 1,\n    endPoint = polygon[(sideIndex + offset) % polygon.length],\n    t = getRandom();\n  return {\n    x: startPoint.x + (endPoint.x - startPoint.x) * t,\n    y: startPoint.y + (endPoint.y - startPoint.y) * t\n  };\n}\nexport function isPointInPolygon(point, polygon) {\n  let inside = false;\n  const offset = 1;\n  for (let i = 0, j = polygon.length - offset; i < polygon.length; j = i++) {\n    const pi = polygon[i],\n      pj = polygon[j];\n    const intersect = pi.y > point.y !== pj.y > point.y && point.x < (pj.x - pi.x) * (point.y - pi.y) / (pj.y - pi.y) + pi.x;\n    if (intersect) {\n      inside = !inside;\n    }\n  }\n  return inside;\n}","map":{"version":3,"names":["getRandom","double","doublePI","Math","PI","defaultRotation","maxAttempts","generateRandomPolygon","position","sides","radius","rotationAngle","arguments","length","undefined","polygon","angle","i","currentAngle","push","x","cos","y","sin","generateRandomPointWithinPolygon","firstIndex","firstPoint","min","max","point","randomPoint","attempts","tmpPoint","isPointInPolygon","generateRandomPointOnPolygonPerimeter","sideIndex","floor","startPoint","offset","endPoint","t","inside","j","pi","pj","intersect"],"sources":["C:/Users/sathw/new22.app/client/node_modules/@tsparticles/plugin-emitters-shape-polygon/browser/utils.js"],"sourcesContent":["import { getRandom } from \"@tsparticles/engine\";\nconst double = 2, doublePI = Math.PI * double, defaultRotation = 0, maxAttempts = 100;\nexport function generateRandomPolygon(position, sides, radius, rotationAngle = defaultRotation) {\n    const polygon = [], angle = doublePI / sides;\n    for (let i = 0; i < sides; i++) {\n        const currentAngle = angle * i + rotationAngle;\n        polygon.push({\n            x: position.x + radius * Math.cos(currentAngle),\n            y: position.y + radius * Math.sin(currentAngle),\n        });\n    }\n    return polygon;\n}\nexport function generateRandomPointWithinPolygon(polygon) {\n    const firstIndex = 0, firstPoint = polygon[firstIndex], min = { ...firstPoint }, max = { ...firstPoint };\n    for (const point of polygon) {\n        if (point.x < min.x) {\n            min.x = point.x;\n        }\n        if (point.x > max.x) {\n            max.x = point.x;\n        }\n        if (point.y < min.y) {\n            min.y = point.y;\n        }\n        if (point.y > max.y) {\n            max.y = point.y;\n        }\n    }\n    let randomPoint = null;\n    for (let attempts = 0; attempts < maxAttempts; attempts++) {\n        const tmpPoint = {\n            x: min.x + getRandom() * (max.x - min.x),\n            y: min.y + getRandom() * (max.y - min.y),\n        };\n        if (isPointInPolygon(tmpPoint, polygon)) {\n            randomPoint = tmpPoint;\n            break;\n        }\n    }\n    return randomPoint;\n}\nexport function generateRandomPointOnPolygonPerimeter(polygon) {\n    const sideIndex = Math.floor(getRandom() * polygon.length), startPoint = polygon[sideIndex], offset = 1, endPoint = polygon[(sideIndex + offset) % polygon.length], t = getRandom();\n    return { x: startPoint.x + (endPoint.x - startPoint.x) * t, y: startPoint.y + (endPoint.y - startPoint.y) * t };\n}\nexport function isPointInPolygon(point, polygon) {\n    let inside = false;\n    const offset = 1;\n    for (let i = 0, j = polygon.length - offset; i < polygon.length; j = i++) {\n        const pi = polygon[i], pj = polygon[j];\n        const intersect = pi.y > point.y !== pj.y > point.y && point.x < ((pj.x - pi.x) * (point.y - pi.y)) / (pj.y - pi.y) + pi.x;\n        if (intersect) {\n            inside = !inside;\n        }\n    }\n    return inside;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}