{"ast":null,"code":"import { errorPrefix, isNumber } from \"@tsparticles/engine\";\nconst origin = {\n    x: 0,\n    y: 0\n  },\n  minWidth = 0;\nexport function getCanvasImageData(ctx, size, offset) {\n  let clear = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  const imageData = ctx.getImageData(origin.x, origin.y, size.width, size.height).data;\n  if (clear) {\n    ctx.clearRect(origin.x, origin.y, size.width, size.height);\n  }\n  const pixels = [];\n  for (let i = 0; i < imageData.length; i += offset) {\n    const idx = i / offset,\n      pos = {\n        x: idx % size.width,\n        y: Math.floor(idx / size.width)\n      };\n    if (!pixels[pos.y]) {\n      pixels[pos.y] = [];\n    }\n    const indexesOffset = {\n        r: 0,\n        g: 1,\n        b: 2,\n        a: 3\n      },\n      alphaFactor = 255;\n    pixels[pos.y][pos.x] = {\n      r: imageData[i + indexesOffset.r],\n      g: imageData[i + indexesOffset.g],\n      b: imageData[i + indexesOffset.b],\n      a: imageData[i + indexesOffset.a] / alphaFactor\n    };\n  }\n  return {\n    pixels,\n    width: Math.min(...pixels.map(row => row.length)),\n    height: pixels.length\n  };\n}\nexport function getImageData(src, offset) {\n  const image = new Image();\n  image.crossOrigin = \"Anonymous\";\n  const p = new Promise((resolve, reject) => {\n    image.onerror = reject;\n    image.onload = () => {\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = image.width;\n      canvas.height = image.height;\n      const context = canvas.getContext(\"2d\");\n      if (!context) {\n        return reject(new Error(`${errorPrefix} Could not get canvas context`));\n      }\n      context.drawImage(image, origin.x, origin.y, image.width, image.height, origin.x, origin.y, canvas.width, canvas.height);\n      resolve(getCanvasImageData(context, canvas, offset));\n    };\n  });\n  image.src = src;\n  return p;\n}\nexport function getTextData(textOptions, offset, fill) {\n  const canvas = document.createElement(\"canvas\"),\n    context = canvas.getContext(\"2d\"),\n    {\n      font,\n      text,\n      lines: linesOptions,\n      color\n    } = textOptions;\n  if (!text || !context) {\n    return;\n  }\n  const lines = text.split(linesOptions.separator),\n    fontSize = isNumber(font.size) ? `${font.size}px` : font.size,\n    linesData = [];\n  let maxWidth = 0,\n    totalHeight = 0;\n  for (const line of lines) {\n    context.font = `${font.style || \"\"} ${font.variant || \"\"} ${font.weight || \"\"} ${fontSize} ${font.family}`;\n    const measure = context.measureText(line),\n      lineData = {\n        measure,\n        text: line,\n        height: measure.actualBoundingBoxAscent + measure.actualBoundingBoxDescent,\n        width: measure.width\n      };\n    maxWidth = Math.max(maxWidth || minWidth, lineData.width);\n    totalHeight += lineData.height + linesOptions.spacing;\n    linesData.push(lineData);\n  }\n  canvas.width = maxWidth;\n  canvas.height = totalHeight;\n  let currentHeight = 0;\n  for (const line of linesData) {\n    context.font = `${font.style || \"\"} ${font.variant || \"\"} ${font.weight || \"\"} ${fontSize} ${font.family}`;\n    if (fill) {\n      context.fillStyle = color;\n      context.fillText(line.text, origin.x, currentHeight + line.measure.actualBoundingBoxAscent);\n    } else {\n      context.strokeStyle = color;\n      context.strokeText(line.text, origin.x, currentHeight + line.measure.actualBoundingBoxAscent);\n    }\n    currentHeight += line.height + linesOptions.spacing;\n  }\n  return getCanvasImageData(context, canvas, offset);\n}","map":{"version":3,"names":["errorPrefix","isNumber","origin","x","y","minWidth","getCanvasImageData","ctx","size","offset","clear","arguments","length","undefined","imageData","getImageData","width","height","data","clearRect","pixels","i","idx","pos","Math","floor","indexesOffset","r","g","b","a","alphaFactor","min","map","row","src","image","Image","crossOrigin","p","Promise","resolve","reject","onerror","onload","canvas","document","createElement","context","getContext","Error","drawImage","getTextData","textOptions","fill","font","text","lines","linesOptions","color","split","separator","fontSize","linesData","maxWidth","totalHeight","line","style","variant","weight","family","measure","measureText","lineData","actualBoundingBoxAscent","actualBoundingBoxDescent","max","spacing","push","currentHeight","fillStyle","fillText","strokeStyle","strokeText"],"sources":["C:/Users/sathw/new22.app/client/node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/utils.js"],"sourcesContent":["import { errorPrefix, isNumber } from \"@tsparticles/engine\";\nconst origin = {\n    x: 0,\n    y: 0,\n}, minWidth = 0;\nexport function getCanvasImageData(ctx, size, offset, clear = true) {\n    const imageData = ctx.getImageData(origin.x, origin.y, size.width, size.height).data;\n    if (clear) {\n        ctx.clearRect(origin.x, origin.y, size.width, size.height);\n    }\n    const pixels = [];\n    for (let i = 0; i < imageData.length; i += offset) {\n        const idx = i / offset, pos = {\n            x: idx % size.width,\n            y: Math.floor(idx / size.width),\n        };\n        if (!pixels[pos.y]) {\n            pixels[pos.y] = [];\n        }\n        const indexesOffset = {\n            r: 0,\n            g: 1,\n            b: 2,\n            a: 3,\n        }, alphaFactor = 255;\n        pixels[pos.y][pos.x] = {\n            r: imageData[i + indexesOffset.r],\n            g: imageData[i + indexesOffset.g],\n            b: imageData[i + indexesOffset.b],\n            a: imageData[i + indexesOffset.a] / alphaFactor,\n        };\n    }\n    return {\n        pixels,\n        width: Math.min(...pixels.map(row => row.length)),\n        height: pixels.length,\n    };\n}\nexport function getImageData(src, offset) {\n    const image = new Image();\n    image.crossOrigin = \"Anonymous\";\n    const p = new Promise((resolve, reject) => {\n        image.onerror = reject;\n        image.onload = () => {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = image.width;\n            canvas.height = image.height;\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                return reject(new Error(`${errorPrefix} Could not get canvas context`));\n            }\n            context.drawImage(image, origin.x, origin.y, image.width, image.height, origin.x, origin.y, canvas.width, canvas.height);\n            resolve(getCanvasImageData(context, canvas, offset));\n        };\n    });\n    image.src = src;\n    return p;\n}\nexport function getTextData(textOptions, offset, fill) {\n    const canvas = document.createElement(\"canvas\"), context = canvas.getContext(\"2d\"), { font, text, lines: linesOptions, color } = textOptions;\n    if (!text || !context) {\n        return;\n    }\n    const lines = text.split(linesOptions.separator), fontSize = isNumber(font.size) ? `${font.size}px` : font.size, linesData = [];\n    let maxWidth = 0, totalHeight = 0;\n    for (const line of lines) {\n        context.font = `${font.style || \"\"} ${font.variant || \"\"} ${font.weight || \"\"} ${fontSize} ${font.family}`;\n        const measure = context.measureText(line), lineData = {\n            measure,\n            text: line,\n            height: measure.actualBoundingBoxAscent + measure.actualBoundingBoxDescent,\n            width: measure.width,\n        };\n        maxWidth = Math.max(maxWidth || minWidth, lineData.width);\n        totalHeight += lineData.height + linesOptions.spacing;\n        linesData.push(lineData);\n    }\n    canvas.width = maxWidth;\n    canvas.height = totalHeight;\n    let currentHeight = 0;\n    for (const line of linesData) {\n        context.font = `${font.style || \"\"} ${font.variant || \"\"} ${font.weight || \"\"} ${fontSize} ${font.family}`;\n        if (fill) {\n            context.fillStyle = color;\n            context.fillText(line.text, origin.x, currentHeight + line.measure.actualBoundingBoxAscent);\n        }\n        else {\n            context.strokeStyle = color;\n            context.strokeText(line.text, origin.x, currentHeight + line.measure.actualBoundingBoxAscent);\n        }\n        currentHeight += line.height + linesOptions.spacing;\n    }\n    return getCanvasImageData(context, canvas, offset);\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,qBAAqB;AAC3D,MAAMC,MAAM,GAAG;IACXC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE;EACP,CAAC;EAAEC,QAAQ,GAAG,CAAC;AACf,OAAO,SAASC,kBAAkBA,CAACC,GAAG,EAAEC,IAAI,EAAEC,MAAM,EAAgB;EAAA,IAAdC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAC9D,MAAMG,SAAS,GAAGP,GAAG,CAACQ,YAAY,CAACb,MAAM,CAACC,CAAC,EAAED,MAAM,CAACE,CAAC,EAAEI,IAAI,CAACQ,KAAK,EAAER,IAAI,CAACS,MAAM,CAAC,CAACC,IAAI;EACpF,IAAIR,KAAK,EAAE;IACPH,GAAG,CAACY,SAAS,CAACjB,MAAM,CAACC,CAAC,EAAED,MAAM,CAACE,CAAC,EAAEI,IAAI,CAACQ,KAAK,EAAER,IAAI,CAACS,MAAM,CAAC;EAC9D;EACA,MAAMG,MAAM,GAAG,EAAE;EACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,SAAS,CAACF,MAAM,EAAES,CAAC,IAAIZ,MAAM,EAAE;IAC/C,MAAMa,GAAG,GAAGD,CAAC,GAAGZ,MAAM;MAAEc,GAAG,GAAG;QAC1BpB,CAAC,EAAEmB,GAAG,GAAGd,IAAI,CAACQ,KAAK;QACnBZ,CAAC,EAAEoB,IAAI,CAACC,KAAK,CAACH,GAAG,GAAGd,IAAI,CAACQ,KAAK;MAClC,CAAC;IACD,IAAI,CAACI,MAAM,CAACG,GAAG,CAACnB,CAAC,CAAC,EAAE;MAChBgB,MAAM,CAACG,GAAG,CAACnB,CAAC,CAAC,GAAG,EAAE;IACtB;IACA,MAAMsB,aAAa,GAAG;QAClBC,CAAC,EAAE,CAAC;QACJC,CAAC,EAAE,CAAC;QACJC,CAAC,EAAE,CAAC;QACJC,CAAC,EAAE;MACP,CAAC;MAAEC,WAAW,GAAG,GAAG;IACpBX,MAAM,CAACG,GAAG,CAACnB,CAAC,CAAC,CAACmB,GAAG,CAACpB,CAAC,CAAC,GAAG;MACnBwB,CAAC,EAAEb,SAAS,CAACO,CAAC,GAAGK,aAAa,CAACC,CAAC,CAAC;MACjCC,CAAC,EAAEd,SAAS,CAACO,CAAC,GAAGK,aAAa,CAACE,CAAC,CAAC;MACjCC,CAAC,EAAEf,SAAS,CAACO,CAAC,GAAGK,aAAa,CAACG,CAAC,CAAC;MACjCC,CAAC,EAAEhB,SAAS,CAACO,CAAC,GAAGK,aAAa,CAACI,CAAC,CAAC,GAAGC;IACxC,CAAC;EACL;EACA,OAAO;IACHX,MAAM;IACNJ,KAAK,EAAEQ,IAAI,CAACQ,GAAG,CAAC,GAAGZ,MAAM,CAACa,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACtB,MAAM,CAAC,CAAC;IACjDK,MAAM,EAAEG,MAAM,CAACR;EACnB,CAAC;AACL;AACA,OAAO,SAASG,YAAYA,CAACoB,GAAG,EAAE1B,MAAM,EAAE;EACtC,MAAM2B,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC;EACzBD,KAAK,CAACE,WAAW,GAAG,WAAW;EAC/B,MAAMC,CAAC,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACvCN,KAAK,CAACO,OAAO,GAAGD,MAAM;IACtBN,KAAK,CAACQ,MAAM,GAAG,MAAM;MACjB,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/CF,MAAM,CAAC7B,KAAK,GAAGoB,KAAK,CAACpB,KAAK;MAC1B6B,MAAM,CAAC5B,MAAM,GAAGmB,KAAK,CAACnB,MAAM;MAC5B,MAAM+B,OAAO,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;MACvC,IAAI,CAACD,OAAO,EAAE;QACV,OAAON,MAAM,CAAC,IAAIQ,KAAK,CAAC,GAAGlD,WAAW,+BAA+B,CAAC,CAAC;MAC3E;MACAgD,OAAO,CAACG,SAAS,CAACf,KAAK,EAAElC,MAAM,CAACC,CAAC,EAAED,MAAM,CAACE,CAAC,EAAEgC,KAAK,CAACpB,KAAK,EAAEoB,KAAK,CAACnB,MAAM,EAAEf,MAAM,CAACC,CAAC,EAAED,MAAM,CAACE,CAAC,EAAEyC,MAAM,CAAC7B,KAAK,EAAE6B,MAAM,CAAC5B,MAAM,CAAC;MACxHwB,OAAO,CAACnC,kBAAkB,CAAC0C,OAAO,EAAEH,MAAM,EAAEpC,MAAM,CAAC,CAAC;IACxD,CAAC;EACL,CAAC,CAAC;EACF2B,KAAK,CAACD,GAAG,GAAGA,GAAG;EACf,OAAOI,CAAC;AACZ;AACA,OAAO,SAASa,WAAWA,CAACC,WAAW,EAAE5C,MAAM,EAAE6C,IAAI,EAAE;EACnD,MAAMT,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAAEC,OAAO,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;IAAE;MAAEM,IAAI;MAAEC,IAAI;MAAEC,KAAK,EAAEC,YAAY;MAAEC;IAAM,CAAC,GAAGN,WAAW;EAC5I,IAAI,CAACG,IAAI,IAAI,CAACR,OAAO,EAAE;IACnB;EACJ;EACA,MAAMS,KAAK,GAAGD,IAAI,CAACI,KAAK,CAACF,YAAY,CAACG,SAAS,CAAC;IAAEC,QAAQ,GAAG7D,QAAQ,CAACsD,IAAI,CAAC/C,IAAI,CAAC,GAAG,GAAG+C,IAAI,CAAC/C,IAAI,IAAI,GAAG+C,IAAI,CAAC/C,IAAI;IAAEuD,SAAS,GAAG,EAAE;EAC/H,IAAIC,QAAQ,GAAG,CAAC;IAAEC,WAAW,GAAG,CAAC;EACjC,KAAK,MAAMC,IAAI,IAAIT,KAAK,EAAE;IACtBT,OAAO,CAACO,IAAI,GAAG,GAAGA,IAAI,CAACY,KAAK,IAAI,EAAE,IAAIZ,IAAI,CAACa,OAAO,IAAI,EAAE,IAAIb,IAAI,CAACc,MAAM,IAAI,EAAE,IAAIP,QAAQ,IAAIP,IAAI,CAACe,MAAM,EAAE;IAC1G,MAAMC,OAAO,GAAGvB,OAAO,CAACwB,WAAW,CAACN,IAAI,CAAC;MAAEO,QAAQ,GAAG;QAClDF,OAAO;QACPf,IAAI,EAAEU,IAAI;QACVjD,MAAM,EAAEsD,OAAO,CAACG,uBAAuB,GAAGH,OAAO,CAACI,wBAAwB;QAC1E3D,KAAK,EAAEuD,OAAO,CAACvD;MACnB,CAAC;IACDgD,QAAQ,GAAGxC,IAAI,CAACoD,GAAG,CAACZ,QAAQ,IAAI3D,QAAQ,EAAEoE,QAAQ,CAACzD,KAAK,CAAC;IACzDiD,WAAW,IAAIQ,QAAQ,CAACxD,MAAM,GAAGyC,YAAY,CAACmB,OAAO;IACrDd,SAAS,CAACe,IAAI,CAACL,QAAQ,CAAC;EAC5B;EACA5B,MAAM,CAAC7B,KAAK,GAAGgD,QAAQ;EACvBnB,MAAM,CAAC5B,MAAM,GAAGgD,WAAW;EAC3B,IAAIc,aAAa,GAAG,CAAC;EACrB,KAAK,MAAMb,IAAI,IAAIH,SAAS,EAAE;IAC1Bf,OAAO,CAACO,IAAI,GAAG,GAAGA,IAAI,CAACY,KAAK,IAAI,EAAE,IAAIZ,IAAI,CAACa,OAAO,IAAI,EAAE,IAAIb,IAAI,CAACc,MAAM,IAAI,EAAE,IAAIP,QAAQ,IAAIP,IAAI,CAACe,MAAM,EAAE;IAC1G,IAAIhB,IAAI,EAAE;MACNN,OAAO,CAACgC,SAAS,GAAGrB,KAAK;MACzBX,OAAO,CAACiC,QAAQ,CAACf,IAAI,CAACV,IAAI,EAAEtD,MAAM,CAACC,CAAC,EAAE4E,aAAa,GAAGb,IAAI,CAACK,OAAO,CAACG,uBAAuB,CAAC;IAC/F,CAAC,MACI;MACD1B,OAAO,CAACkC,WAAW,GAAGvB,KAAK;MAC3BX,OAAO,CAACmC,UAAU,CAACjB,IAAI,CAACV,IAAI,EAAEtD,MAAM,CAACC,CAAC,EAAE4E,aAAa,GAAGb,IAAI,CAACK,OAAO,CAACG,uBAAuB,CAAC;IACjG;IACAK,aAAa,IAAIb,IAAI,CAACjD,MAAM,GAAGyC,YAAY,CAACmB,OAAO;EACvD;EACA,OAAOvE,kBAAkB,CAAC0C,OAAO,EAAEH,MAAM,EAAEpC,MAAM,CAAC;AACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}