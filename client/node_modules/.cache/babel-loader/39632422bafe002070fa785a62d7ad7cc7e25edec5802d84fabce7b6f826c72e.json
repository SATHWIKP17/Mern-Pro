{"ast":null,"code":"import { getRandom } from \"@tsparticles/engine\";\nexport function CurvesPathGen(rndFunc, period, nbHarmonics, attenHarmonics) {\n  let lowValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  let highValue = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  const arP0 = [],\n    arP1 = [],\n    amplitudes = [],\n    increments = [],\n    phases = [],\n    randomFunc = rndFunc ?? getRandom;\n  let globAmplitude = 0;\n  if (nbHarmonics < 1) nbHarmonics = 1;\n  for (let kh = 1; kh <= nbHarmonics; ++kh) {\n    arP0[kh] = randomFunc();\n    arP1[kh] = randomFunc();\n    amplitudes[kh] = kh === 1 ? 1 : amplitudes[kh - 1] * attenHarmonics;\n    globAmplitude += amplitudes[kh];\n    increments[kh] = kh / period;\n    phases[kh] = randomFunc();\n  }\n  amplitudes.forEach((value, kh) => amplitudes[kh] = value / globAmplitude * (highValue - lowValue));\n  return () => {\n    let pf,\n      pfl,\n      signal = 0;\n    for (let kh = nbHarmonics; kh >= 1; --kh) {\n      pf = phases[kh] += increments[kh];\n      if (phases[kh] >= 1) {\n        pf = phases[kh] -= 1;\n        arP0[kh] = arP1[kh];\n        arP1[kh] = randomFunc();\n      }\n      pfl = pf ** 2 * (3 - 2 * pf);\n      signal += (arP0[kh] * (1 - pfl) + arP1[kh] * pfl) * amplitudes[kh];\n    }\n    return signal + lowValue;\n  };\n}","map":{"version":3,"names":["getRandom","CurvesPathGen","rndFunc","period","nbHarmonics","attenHarmonics","lowValue","arguments","length","undefined","highValue","arP0","arP1","amplitudes","increments","phases","randomFunc","globAmplitude","kh","forEach","value","pf","pfl","signal"],"sources":["C:/Users/sathw/new22.app/frontend/node_modules/@tsparticles/path-curves/browser/Curves.js"],"sourcesContent":["import { getRandom } from \"@tsparticles/engine\";\nexport function CurvesPathGen(rndFunc, period, nbHarmonics, attenHarmonics, lowValue = 0, highValue = 1) {\n    const arP0 = [], arP1 = [], amplitudes = [], increments = [], phases = [], randomFunc = rndFunc ?? getRandom;\n    let globAmplitude = 0;\n    if (nbHarmonics < 1)\n        nbHarmonics = 1;\n    for (let kh = 1; kh <= nbHarmonics; ++kh) {\n        arP0[kh] = randomFunc();\n        arP1[kh] = randomFunc();\n        amplitudes[kh] = kh === 1 ? 1 : amplitudes[kh - 1] * attenHarmonics;\n        globAmplitude += amplitudes[kh];\n        increments[kh] = kh / period;\n        phases[kh] = randomFunc();\n    }\n    amplitudes.forEach((value, kh) => (amplitudes[kh] = (value / globAmplitude) * (highValue - lowValue)));\n    return () => {\n        let pf, pfl, signal = 0;\n        for (let kh = nbHarmonics; kh >= 1; --kh) {\n            pf = phases[kh] += increments[kh];\n            if (phases[kh] >= 1) {\n                pf = phases[kh] -= 1;\n                arP0[kh] = arP1[kh];\n                arP1[kh] = randomFunc();\n            }\n            pfl = pf ** 2 * (3 - 2 * pf);\n            signal += (arP0[kh] * (1 - pfl) + arP1[kh] * pfl) * amplitudes[kh];\n        }\n        return signal + lowValue;\n    };\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,qBAAqB;AAC/C,OAAO,SAASC,aAAaA,CAACC,OAAO,EAAEC,MAAM,EAAEC,WAAW,EAAEC,cAAc,EAA+B;EAAA,IAA7BC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAAA,IAAEG,SAAS,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EACnG,MAAMI,IAAI,GAAG,EAAE;IAAEC,IAAI,GAAG,EAAE;IAAEC,UAAU,GAAG,EAAE;IAAEC,UAAU,GAAG,EAAE;IAAEC,MAAM,GAAG,EAAE;IAAEC,UAAU,GAAGd,OAAO,IAAIF,SAAS;EAC5G,IAAIiB,aAAa,GAAG,CAAC;EACrB,IAAIb,WAAW,GAAG,CAAC,EACfA,WAAW,GAAG,CAAC;EACnB,KAAK,IAAIc,EAAE,GAAG,CAAC,EAAEA,EAAE,IAAId,WAAW,EAAE,EAAEc,EAAE,EAAE;IACtCP,IAAI,CAACO,EAAE,CAAC,GAAGF,UAAU,CAAC,CAAC;IACvBJ,IAAI,CAACM,EAAE,CAAC,GAAGF,UAAU,CAAC,CAAC;IACvBH,UAAU,CAACK,EAAE,CAAC,GAAGA,EAAE,KAAK,CAAC,GAAG,CAAC,GAAGL,UAAU,CAACK,EAAE,GAAG,CAAC,CAAC,GAAGb,cAAc;IACnEY,aAAa,IAAIJ,UAAU,CAACK,EAAE,CAAC;IAC/BJ,UAAU,CAACI,EAAE,CAAC,GAAGA,EAAE,GAAGf,MAAM;IAC5BY,MAAM,CAACG,EAAE,CAAC,GAAGF,UAAU,CAAC,CAAC;EAC7B;EACAH,UAAU,CAACM,OAAO,CAAC,CAACC,KAAK,EAAEF,EAAE,KAAML,UAAU,CAACK,EAAE,CAAC,GAAIE,KAAK,GAAGH,aAAa,IAAKP,SAAS,GAAGJ,QAAQ,CAAE,CAAC;EACtG,OAAO,MAAM;IACT,IAAIe,EAAE;MAAEC,GAAG;MAAEC,MAAM,GAAG,CAAC;IACvB,KAAK,IAAIL,EAAE,GAAGd,WAAW,EAAEc,EAAE,IAAI,CAAC,EAAE,EAAEA,EAAE,EAAE;MACtCG,EAAE,GAAGN,MAAM,CAACG,EAAE,CAAC,IAAIJ,UAAU,CAACI,EAAE,CAAC;MACjC,IAAIH,MAAM,CAACG,EAAE,CAAC,IAAI,CAAC,EAAE;QACjBG,EAAE,GAAGN,MAAM,CAACG,EAAE,CAAC,IAAI,CAAC;QACpBP,IAAI,CAACO,EAAE,CAAC,GAAGN,IAAI,CAACM,EAAE,CAAC;QACnBN,IAAI,CAACM,EAAE,CAAC,GAAGF,UAAU,CAAC,CAAC;MAC3B;MACAM,GAAG,GAAGD,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAGA,EAAE,CAAC;MAC5BE,MAAM,IAAI,CAACZ,IAAI,CAACO,EAAE,CAAC,IAAI,CAAC,GAAGI,GAAG,CAAC,GAAGV,IAAI,CAACM,EAAE,CAAC,GAAGI,GAAG,IAAIT,UAAU,CAACK,EAAE,CAAC;IACtE;IACA,OAAOK,MAAM,GAAGjB,QAAQ;EAC5B,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}