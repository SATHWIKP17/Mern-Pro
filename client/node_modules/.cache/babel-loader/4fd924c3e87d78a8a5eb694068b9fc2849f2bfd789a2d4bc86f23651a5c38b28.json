{"ast":null,"code":"import { Vector, deepExtend, getRandom } from \"@tsparticles/engine\";\nimport { PerlinNoise } from \"@tsparticles/perlin-noise\";\nconst double = 2,\n  doublePI = Math.PI * double,\n  defaultOptions = {\n    draw: false,\n    size: 20,\n    increment: 0.004,\n    columns: 0,\n    rows: 0,\n    width: 0,\n    height: 0,\n    factor: {\n      angle: 0.02,\n      length: 0.01\n    },\n    offset: {\n      x: 40000,\n      y: 40000\n    }\n  };\nexport class PerlinNoiseGenerator {\n  constructor() {\n    this._calculateField = () => {\n      const {\n          field,\n          noiseGen,\n          options\n        } = this,\n        lengthFactor = options.factor.length,\n        angleFactor = options.factor.angle;\n      for (let x = 0; x < options.columns; x++) {\n        const column = field[x];\n        for (let y = 0; y < options.rows; y++) {\n          const cell = column[y];\n          cell.length = noiseGen.noise3d(x * lengthFactor + options.offset.x, y * lengthFactor + options.offset.y, this.noiseZ);\n          cell.angle = noiseGen.noise3d(x * angleFactor, y * angleFactor, this.noiseZ) * doublePI;\n        }\n      }\n    };\n    this._drawField = ctx => {\n      const {\n        field,\n        options\n      } = this;\n      for (let x = 0; x < options.columns; x++) {\n        const column = field[x];\n        for (let y = 0; y < options.rows; y++) {\n          const cell = column[y],\n            {\n              angle,\n              length\n            } = cell;\n          ctx.setTransform(1, 0, 0, 1, x * this.options.size, y * this.options.size);\n          ctx.rotate(angle);\n          ctx.strokeStyle = \"white\";\n          ctx.beginPath();\n          ctx.moveTo(0, 0);\n          ctx.lineTo(0, this.options.size * length);\n          ctx.stroke();\n          ctx.setTransform(1, 0, 0, 1, 0, 0);\n        }\n      }\n    };\n    this._initField = () => {\n      const {\n        columns,\n        rows\n      } = this.options;\n      this.field = new Array(columns);\n      for (let x = 0; x < columns; x++) {\n        this.field[x] = new Array(rows);\n        for (let y = 0; y < rows; y++) {\n          this.field[x][y] = Vector.origin;\n        }\n      }\n    };\n    this.noiseGen = new PerlinNoise();\n    this.field = [];\n    this.noiseZ = 0;\n    this.options = deepExtend({}, defaultOptions);\n  }\n  generate(particle) {\n    const pos = particle.getPosition(),\n      {\n        size\n      } = this.options,\n      point = {\n        x: Math.max(Math.floor(pos.x / size), 0),\n        y: Math.max(Math.floor(pos.y / size), 0)\n      },\n      {\n        field\n      } = this;\n    return !field?.[point.x]?.[point.y] ? Vector.origin : field[point.x][point.y].copy();\n  }\n  init(container) {\n    this.container = container;\n    this._setup();\n  }\n  reset() {}\n  update() {\n    if (!this.container) {\n      return;\n    }\n    this._calculateField();\n    this.noiseZ += this.options.increment;\n    if (this.options.draw) {\n      this.container.canvas.draw(ctx => this._drawField(ctx));\n    }\n  }\n  _resetField() {\n    const container = this.container;\n    if (!container) {\n      return;\n    }\n    const sourceOptions = container.actualOptions.particles.move.path.options,\n      {\n        options\n      } = this;\n    options.size = sourceOptions.size > 0 ? sourceOptions.size : defaultOptions.size;\n    options.increment = sourceOptions.increment > 0 ? sourceOptions.increment : defaultOptions.increment;\n    options.draw = !!sourceOptions.draw;\n    const offset = sourceOptions.offset;\n    options.offset.x = offset?.x ?? defaultOptions.offset.x;\n    options.offset.y = offset?.y ?? defaultOptions.offset.y;\n    const factor = sourceOptions.factor;\n    options.factor.angle = factor?.angle ?? defaultOptions.factor.angle;\n    options.factor.length = factor?.length ?? defaultOptions.factor.length;\n    options.width = container.canvas.size.width;\n    options.height = container.canvas.size.height;\n    this.options.seed = sourceOptions.seed;\n    this.noiseGen.seed(this.options.seed ?? getRandom());\n    options.columns = Math.floor(this.options.width / this.options.size) + 1;\n    options.rows = Math.floor(this.options.height / this.options.size) + 1;\n    this._initField();\n  }\n  _setup() {\n    this.noiseZ = 0;\n    this._resetField();\n    window.addEventListener(\"resize\", () => this._resetField());\n  }\n}","map":{"version":3,"names":["Vector","deepExtend","getRandom","PerlinNoise","double","doublePI","Math","PI","defaultOptions","draw","size","increment","columns","rows","width","height","factor","angle","length","offset","x","y","PerlinNoiseGenerator","constructor","_calculateField","field","noiseGen","options","lengthFactor","angleFactor","column","cell","noise3d","noiseZ","_drawField","ctx","setTransform","rotate","strokeStyle","beginPath","moveTo","lineTo","stroke","_initField","Array","origin","generate","particle","pos","getPosition","point","max","floor","copy","init","container","_setup","reset","update","canvas","_resetField","sourceOptions","actualOptions","particles","move","path","seed","window","addEventListener"],"sources":["C:/Users/sathw/new22.app/client/node_modules/@tsparticles/path-perlin-noise/browser/PerlinNoiseGenerator.js"],"sourcesContent":["import { Vector, deepExtend, getRandom, } from \"@tsparticles/engine\";\nimport { PerlinNoise } from \"@tsparticles/perlin-noise\";\nconst double = 2, doublePI = Math.PI * double, defaultOptions = {\n    draw: false,\n    size: 20,\n    increment: 0.004,\n    columns: 0,\n    rows: 0,\n    width: 0,\n    height: 0,\n    factor: {\n        angle: 0.02,\n        length: 0.01,\n    },\n    offset: {\n        x: 40000,\n        y: 40000,\n    },\n};\nexport class PerlinNoiseGenerator {\n    constructor() {\n        this._calculateField = () => {\n            const { field, noiseGen, options } = this, lengthFactor = options.factor.length, angleFactor = options.factor.angle;\n            for (let x = 0; x < options.columns; x++) {\n                const column = field[x];\n                for (let y = 0; y < options.rows; y++) {\n                    const cell = column[y];\n                    cell.length = noiseGen.noise3d(x * lengthFactor + options.offset.x, y * lengthFactor + options.offset.y, this.noiseZ);\n                    cell.angle = noiseGen.noise3d(x * angleFactor, y * angleFactor, this.noiseZ) * doublePI;\n                }\n            }\n        };\n        this._drawField = ctx => {\n            const { field, options } = this;\n            for (let x = 0; x < options.columns; x++) {\n                const column = field[x];\n                for (let y = 0; y < options.rows; y++) {\n                    const cell = column[y], { angle, length } = cell;\n                    ctx.setTransform(1, 0, 0, 1, x * this.options.size, y * this.options.size);\n                    ctx.rotate(angle);\n                    ctx.strokeStyle = \"white\";\n                    ctx.beginPath();\n                    ctx.moveTo(0, 0);\n                    ctx.lineTo(0, this.options.size * length);\n                    ctx.stroke();\n                    ctx.setTransform(1, 0, 0, 1, 0, 0);\n                }\n            }\n        };\n        this._initField = () => {\n            const { columns, rows } = this.options;\n            this.field = new Array(columns);\n            for (let x = 0; x < columns; x++) {\n                this.field[x] = new Array(rows);\n                for (let y = 0; y < rows; y++) {\n                    this.field[x][y] = Vector.origin;\n                }\n            }\n        };\n        this.noiseGen = new PerlinNoise();\n        this.field = [];\n        this.noiseZ = 0;\n        this.options = deepExtend({}, defaultOptions);\n    }\n    generate(particle) {\n        const pos = particle.getPosition(), { size } = this.options, point = {\n            x: Math.max(Math.floor(pos.x / size), 0),\n            y: Math.max(Math.floor(pos.y / size), 0),\n        }, { field } = this;\n        return !field?.[point.x]?.[point.y] ? Vector.origin : field[point.x][point.y].copy();\n    }\n    init(container) {\n        this.container = container;\n        this._setup();\n    }\n    reset() {\n    }\n    update() {\n        if (!this.container) {\n            return;\n        }\n        this._calculateField();\n        this.noiseZ += this.options.increment;\n        if (this.options.draw) {\n            this.container.canvas.draw(ctx => this._drawField(ctx));\n        }\n    }\n    _resetField() {\n        const container = this.container;\n        if (!container) {\n            return;\n        }\n        const sourceOptions = container.actualOptions.particles.move.path.options, { options } = this;\n        options.size = sourceOptions.size > 0 ? sourceOptions.size : defaultOptions.size;\n        options.increment =\n            sourceOptions.increment > 0 ? sourceOptions.increment : defaultOptions.increment;\n        options.draw = !!sourceOptions.draw;\n        const offset = sourceOptions.offset;\n        options.offset.x = offset?.x ?? defaultOptions.offset.x;\n        options.offset.y = offset?.y ?? defaultOptions.offset.y;\n        const factor = sourceOptions.factor;\n        options.factor.angle = factor?.angle ?? defaultOptions.factor.angle;\n        options.factor.length = factor?.length ?? defaultOptions.factor.length;\n        options.width = container.canvas.size.width;\n        options.height = container.canvas.size.height;\n        this.options.seed = sourceOptions.seed;\n        this.noiseGen.seed(this.options.seed ?? getRandom());\n        options.columns = Math.floor(this.options.width / this.options.size) + 1;\n        options.rows = Math.floor(this.options.height / this.options.size) + 1;\n        this._initField();\n    }\n    _setup() {\n        this.noiseZ = 0;\n        this._resetField();\n        window.addEventListener(\"resize\", () => this._resetField());\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}